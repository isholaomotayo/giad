{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/developer1/apps/giadFrontend/package/common/src/contexts/DrawerContext.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { useReducer } from 'react';\nvar initialState = {\n  isOpen: false\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'TOGGLE':\n      return _objectSpread({}, state, {\n        isOpen: !state.isOpen\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport var DrawerContext = React.createContext({});\nexport var DrawerProvider = function DrawerProvider(_ref) {\n  var children = _ref.children;\n\n  var _useReducer = useReducer(reducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  return __jsx(DrawerContext.Provider, {\n    value: {\n      state: state,\n      dispatch: dispatch\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["/Users/developer1/apps/giadFrontend/package/common/src/contexts/DrawerContext.js"],"names":["initialState","isOpen","action","state","DrawerContext","React","DrawerProvider","children","dispatch","useReducer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,UAAA,QAAA,OAAA;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE;AADW,CAArB;;AAIA,SAAA,OAAA,CAAA,KAAA,EAAA,MAAA,EAAgC;AAC9B,UAAQC,MAAM,CAAd,IAAA;AACE,SAAA,QAAA;AACE,aAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEED,QAAAA,MAAM,EAAE,CAACE,KAAK,CAACF;AAFjB,OAAA,CAAA;;AAIF;AACE,aAAA,KAAA;AAPJ;AASD;;AACD,OAAO,IAAMG,aAAa,GAAGC,KAAK,CAALA,aAAAA,CAAtB,EAAsBA,CAAtB;AAEP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAA,IAAA,EAAkB;AAAA,MAAfC,QAAe,GAAA,IAAA,CAAfA,QAAe;;AAAA,MAAA,WAAA,GACpBE,UAAU,CAAA,OAAA,EADU,YACV,CADU;AAAA,MACvCN,KADuC,GAAA,WAAA,CAAA,CAAA,CAAA;AAAA,MAChCK,QADgC,GAAA,WAAA,CAAA,CAAA,CAAA;;AAE9C,SACE,KAAA,CAAC,aAAD,CAAA,QAAA,EAAA;AAAwB,IAAA,KAAK,EAAE;AAAEL,MAAAA,KAAK,EAAP,KAAA;AAASK,MAAAA,QAAQ,EAARA;AAAT,KAA/B;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA;AAAA,KAAA;AAAA,IAAA,MAAA,EAAA;AAAA,GAAA,EADF,QACE,CADF;AAFK,CAAA","sourcesContent":["import React, { useReducer } from 'react';\r\n\r\nconst initialState = {\r\n  isOpen: false,\r\n};\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'TOGGLE':\r\n      return {\r\n        ...state,\r\n        isOpen: !state.isOpen,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport const DrawerContext = React.createContext({});\r\n\r\nexport const DrawerProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <DrawerContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </DrawerContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}