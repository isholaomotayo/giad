{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport styled from 'styled-components';\nimport { variant } from 'styled-system';\nimport { colorStyle } from '../../theme/customVariant';\nimport { AnimSpinner } from '../Animation';\nimport { base } from '../base';\nconst LoaderStyle = styled.span.withConfig({\n  displayName: \"loaderstyle__LoaderStyle\",\n  componentId: \"sc-6byg9m-0\"\n})([\"display:inline-flex;width:14px;height:14px;border-radius:50%;overflow:hidden;border-width:2px;border-style:solid;border-color:\", \";border-top-color:transparent !important;\", \" \", \" \", \"\"], props => props.loaderColor ? props.loaderColor : '#000000', AnimSpinner, colorStyle, base); // prop types can also be added from the style functions\n\nLoaderStyle.propTypes = _objectSpread({}, variant.propTypes);\nLoaderStyle.displayName = 'LoaderStyle';\nexport default LoaderStyle;","map":null,"metadata":{},"sourceType":"module"}