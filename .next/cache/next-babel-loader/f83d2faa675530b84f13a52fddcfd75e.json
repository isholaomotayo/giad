{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Fragment, useEffect } from 'react';\nimport Glide from '@glidejs/glide';\nimport '@glidejs/glide/dist/css/glide.core.min.css';\nimport GlideWrapper, { ButtonControlWrapper, ButtonWrapper, BulletControlWrapper, BulletButton, DefaultBtn } from './glide.style';\n\nvar GlideCarousel = function GlideCarousel(_ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      options = _ref.options,\n      controls = _ref.controls,\n      prevButton = _ref.prevButton,\n      nextButton = _ref.nextButton,\n      prevWrapper = _ref.prevWrapper,\n      nextWrapper = _ref.nextWrapper,\n      bullets = _ref.bullets,\n      numberOfBullets = _ref.numberOfBullets,\n      buttonWrapperStyle = _ref.buttonWrapperStyle,\n      bulletWrapperStyle = _ref.bulletWrapperStyle,\n      bulletButtonStyle = _ref.bulletButtonStyle,\n      carouselSelector = _ref.carouselSelector;\n  // Add all classs to an array\n  var addAllClasses = ['glide']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  } // number of bullets loop\n\n\n  var totalBullets = [];\n\n  for (var i = 0; i < numberOfBullets; i++) {\n    totalBullets.push(i);\n  } // Load glide\n\n\n  useEffect(function () {\n    var glide = new Glide(carouselSelector ? \"#\".concat(carouselSelector) : '#glide', _objectSpread({}, options));\n    glide.mount();\n  });\n  return __jsx(GlideWrapper, {\n    className: addAllClasses.join(' '),\n    id: carouselSelector || 'glide'\n  }, __jsx(\"div\", {\n    className: \"glide__track\",\n    \"data-glide-el\": \"track\"\n  }, __jsx(\"ul\", {\n    className: \"glide__slides\"\n  }, children)), controls && __jsx(ButtonControlWrapper, _extends({\n    className: \"glide__controls\",\n    \"data-glide-el\": \"controls\"\n  }, buttonWrapperStyle), __jsx(ButtonWrapper, _extends({}, prevWrapper, {\n    className: \"glide__prev--area\",\n    \"data-glide-dir\": \"<\",\n    \"aria-label\": \"prev\"\n  }), prevButton ? prevButton : __jsx(DefaultBtn, null, \"Prev\")), __jsx(ButtonWrapper, _extends({}, nextWrapper, {\n    className: \"glide__next--area\",\n    \"data-glide-dir\": \">\",\n    \"aria-label\": \"next\"\n  }), nextButton ? nextButton : __jsx(DefaultBtn, null, \"Next\"))), bullets && __jsx(BulletControlWrapper, _extends({\n    className: \"glide__bullets\",\n    \"data-glide-el\": \"controls[nav]\"\n  }, bulletWrapperStyle), __jsx(Fragment, null, totalBullets.map(function (index) {\n    return __jsx(BulletButton, _extends({\n      key: index,\n      className: \"glide__bullet\",\n      \"data-glide-dir\": \"=\".concat(index),\n      \"aria-label\": \"bullet\".concat(index + 1)\n    }, bulletButtonStyle));\n  }))));\n};\n\n// GlideCarousel default props\nGlideCarousel.defaultProps = {\n  controls: true,\n  bullets: false\n};\nexport default GlideCarousel;","map":null,"metadata":{},"sourceType":"module"}