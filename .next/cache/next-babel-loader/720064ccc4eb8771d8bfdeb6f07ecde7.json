{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation createOrder($token: String!) {\\n    createOrder(token: $token) {\\n      id\\n      charge\\n      total\\n      items {\\n        id\\n        title\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Mutation } from 'react-apollo';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport gql from 'graphql-tag';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport Error from './ErrorMessage';\nimport User, { CURRENT_USER_QUERY } from './User';\nvar CREATE_ORDER_MUTATION = gql(_templateObject());\n\nfunction totalItems(cart) {\n  return cart.reduce(function (tally, cartItem) {\n    return tally + cartItem.quantity;\n  }, 0);\n}\n\nvar TakeMyMoney =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TakeMyMoney, _React$Component);\n\n  function TakeMyMoney() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TakeMyMoney);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TakeMyMoney)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onToken\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(res, createOrder) {\n        var order;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                NProgress.start(); // manually call the mutation once we have the stripe token\n\n                _context.next = 3;\n                return createOrder({\n                  variables: {\n                    token: res.id\n                  }\n                })[\"catch\"](function (err) {\n                  alert(err.message);\n                });\n\n              case 3:\n                order = _context.sent;\n                Router.push({\n                  pathname: '/order',\n                  query: {\n                    id: order.data.createOrder.id\n                  }\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(TakeMyMoney, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(User, null, function (_ref2) {\n        var me = _ref2.data.me,\n            loading = _ref2.loading;\n        if (loading) return null;\n        return __jsx(Mutation, {\n          mutation: CREATE_ORDER_MUTATION,\n          refetchQueries: [{\n            query: CURRENT_USER_QUERY\n          }]\n        }, function (createOrder) {\n          return __jsx(StripeCheckout, {\n            amount: calcTotalPrice(me ? me.cart : ''),\n            name: \"Sick Fits\",\n            description: \"Order of \".concat(totalItems(me.cart), \" items!\"),\n            image: me.cart.length && me.cart[0].item && me.cart[0].item.image,\n            stripeKey: \"pk_test_Vtknn6vSdcZWSG2JWvEiWSqC\",\n            currency: \"USD\",\n            email: me.email,\n            token: function token(res) {\n              return _this2.onToken(res, createOrder);\n            }\n          }, _this2.props.children);\n        });\n      });\n    }\n  }]);\n\n  return TakeMyMoney;\n}(React.Component);\n\nexport default TakeMyMoney;\nexport { CREATE_ORDER_MUTATION };","map":null,"metadata":{},"sourceType":"module"}