{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport { __assign } from 'tslib';\nimport { print } from 'graphql/language/printer';\nimport { InvariantError } from 'ts-invariant';\nvar defaultHttpOptions = {\n  includeQuery: true,\n  includeExtensions: false\n};\nvar defaultHeaders = {\n  accept: '*/*',\n  'content-type': 'application/json'\n};\nvar defaultOptions = {\n  method: 'POST'\n};\nvar fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions\n};\n\nvar throwServerError = function throwServerError(response, result, message) {\n  var error = new Error(message);\n  error.name = 'ServerError';\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n  throw error;\n};\n\nvar parseAndCheckHttpResponse = function parseAndCheckHttpResponse(operations) {\n  return function (response) {\n    return response.text().then(function (bodyText) {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        var parseError = err;\n        parseError.name = 'ServerParseError';\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        return _Promise.reject(parseError);\n      }\n    }).then(function (result) {\n      if (response.status >= 300) {\n        throwServerError(response, result, \"Response not successful: Received status code \" + response.status);\n      }\n\n      if (!_Array$isArray(result) && !result.hasOwnProperty('data') && !result.hasOwnProperty('errors')) {\n        throwServerError(response, result, \"Server response was missing for query '\" + (_Array$isArray(operations) ? operations.map(function (op) {\n          return op.operationName;\n        }) : operations.operationName) + \"'.\");\n      }\n\n      return result;\n    });\n  };\n};\n\nvar checkFetcher = function checkFetcher(fetcher) {\n  if (!fetcher && typeof fetch === 'undefined') {\n    var library = 'unfetch';\n    if (false) library = 'node-fetch';\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"\\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\\nyour environment like https://www.npmjs.com/package/\" + library + \".\\n\\nFor example:\\nimport fetch from '\" + library + \"';\\nimport { createHttpLink } from 'apollo-link-http';\\n\\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });\");\n  }\n};\n\nvar createSignalIfSupported = function createSignalIfSupported() {\n  if (typeof AbortController === 'undefined') return {\n    controller: false,\n    signal: false\n  };\n  var controller = new AbortController();\n  var signal = controller.signal;\n  return {\n    controller: controller,\n    signal: signal\n  };\n};\n\nvar selectHttpOptionsAndBody = function selectHttpOptionsAndBody(operation, fallbackConfig) {\n  var configs = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    configs[_i - 2] = arguments[_i];\n  }\n\n  var options = __assign({}, fallbackConfig.options, {\n    headers: fallbackConfig.headers,\n    credentials: fallbackConfig.credentials\n  });\n\n  var http = fallbackConfig.http;\n  configs.forEach(function (config) {\n    options = __assign({}, options, config.options, {\n      headers: __assign({}, options.headers, config.headers)\n    });\n    if (config.credentials) options.credentials = config.credentials;\n    http = __assign({}, http, config.http);\n  });\n  var operationName = operation.operationName,\n      extensions = operation.extensions,\n      variables = operation.variables,\n      query = operation.query;\n  var body = {\n    operationName: operationName,\n    variables: variables\n  };\n  if (http.includeExtensions) body.extensions = extensions;\n  if (http.includeQuery) body.query = print(query);\n  return {\n    options: options,\n    body: body\n  };\n};\n\nvar serializeFetchParameter = function serializeFetchParameter(p, label) {\n  var serialized;\n\n  try {\n    serialized = _JSON$stringify(p);\n  } catch (e) {\n    var parseError = process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"Network request failed. \" + label + \" is not serializable: \" + e.message);\n    parseError.parseError = e;\n    throw parseError;\n  }\n\n  return serialized;\n};\n\nvar selectURI = function selectURI(operation, fallbackURI) {\n  var context = operation.getContext();\n  var contextURI = context.uri;\n\n  if (contextURI) {\n    return contextURI;\n  } else if (typeof fallbackURI === 'function') {\n    return fallbackURI(operation);\n  } else {\n    return fallbackURI || '/graphql';\n  }\n};\n\nexport { checkFetcher, createSignalIfSupported, fallbackHttpConfig, parseAndCheckHttpResponse, selectHttpOptionsAndBody, selectURI, serializeFetchParameter, throwServerError };","map":{"version":3,"sources":["/Users/developer1/apps/giadFrontend/package/node_modules/apollo-link-http-common/lib/bundle.esm.js"],"names":["__assign","print","InvariantError","defaultHttpOptions","includeQuery","includeExtensions","defaultHeaders","accept","defaultOptions","method","fallbackHttpConfig","http","headers","options","throwServerError","response","result","message","error","Error","name","statusCode","status","parseAndCheckHttpResponse","operations","text","then","bodyText","JSON","parse","err","parseError","reject","hasOwnProperty","map","op","operationName","checkFetcher","fetcher","fetch","library","process","env","NODE_ENV","createSignalIfSupported","AbortController","controller","signal","selectHttpOptionsAndBody","operation","fallbackConfig","configs","_i","arguments","length","credentials","forEach","config","extensions","variables","query","body","serializeFetchParameter","p","label","serialized","e","selectURI","fallbackURI","context","getContext","contextURI","uri"],"mappings":"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","sourcesContent":["import { __assign } from 'tslib';\nimport { print } from 'graphql/language/printer';\nimport { InvariantError } from 'ts-invariant';\n\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n};\nvar defaultHeaders = {\n    accept: '*/*',\n    'content-type': 'application/json',\n};\nvar defaultOptions = {\n    method: 'POST',\n};\nvar fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions,\n};\nvar throwServerError = function (response, result, message) {\n    var error = new Error(message);\n    error.name = 'ServerError';\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n};\nvar parseAndCheckHttpResponse = function (operations) { return function (response) {\n    return (response\n        .text()\n        .then(function (bodyText) {\n        try {\n            return JSON.parse(bodyText);\n        }\n        catch (err) {\n            var parseError = err;\n            parseError.name = 'ServerParseError';\n            parseError.response = response;\n            parseError.statusCode = response.status;\n            parseError.bodyText = bodyText;\n            return Promise.reject(parseError);\n        }\n    })\n        .then(function (result) {\n        if (response.status >= 300) {\n            throwServerError(response, result, \"Response not successful: Received status code \" + response.status);\n        }\n        if (!Array.isArray(result) &&\n            !result.hasOwnProperty('data') &&\n            !result.hasOwnProperty('errors')) {\n            throwServerError(response, result, \"Server response was missing for query '\" + (Array.isArray(operations)\n                ? operations.map(function (op) { return op.operationName; })\n                : operations.operationName) + \"'.\");\n        }\n        return result;\n    }));\n}; };\nvar checkFetcher = function (fetcher) {\n    if (!fetcher && typeof fetch === 'undefined') {\n        var library = 'unfetch';\n        if (typeof window === 'undefined')\n            library = 'node-fetch';\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"\\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\\nyour environment like https://www.npmjs.com/package/\" + library + \".\\n\\nFor example:\\nimport fetch from '\" + library + \"';\\nimport { createHttpLink } from 'apollo-link-http';\\n\\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });\");\n    }\n};\nvar createSignalIfSupported = function () {\n    if (typeof AbortController === 'undefined')\n        return { controller: false, signal: false };\n    var controller = new AbortController();\n    var signal = controller.signal;\n    return { controller: controller, signal: signal };\n};\nvar selectHttpOptionsAndBody = function (operation, fallbackConfig) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = __assign({}, fallbackConfig.options, { headers: fallbackConfig.headers, credentials: fallbackConfig.credentials });\n    var http = fallbackConfig.http;\n    configs.forEach(function (config) {\n        options = __assign({}, options, config.options, { headers: __assign({}, options.headers, config.headers) });\n        if (config.credentials)\n            options.credentials = config.credentials;\n        http = __assign({}, http, config.http);\n    });\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = { operationName: operationName, variables: variables };\n    if (http.includeExtensions)\n        body.extensions = extensions;\n    if (http.includeQuery)\n        body.query = print(query);\n    return {\n        options: options,\n        body: body,\n    };\n};\nvar serializeFetchParameter = function (p, label) {\n    var serialized;\n    try {\n        serialized = JSON.stringify(p);\n    }\n    catch (e) {\n        var parseError = process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"Network request failed. \" + label + \" is not serializable: \" + e.message);\n        parseError.parseError = e;\n        throw parseError;\n    }\n    return serialized;\n};\nvar selectURI = function (operation, fallbackURI) {\n    var context = operation.getContext();\n    var contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    }\n    else if (typeof fallbackURI === 'function') {\n        return fallbackURI(operation);\n    }\n    else {\n        return fallbackURI || '/graphql';\n    }\n};\n\nexport { checkFetcher, createSignalIfSupported, fallbackHttpConfig, parseAndCheckHttpResponse, selectHttpOptionsAndBody, selectURI, serializeFetchParameter, throwServerError };\n//# sourceMappingURL=bundle.esm.js.map\n"]},"metadata":{},"sourceType":"module"}