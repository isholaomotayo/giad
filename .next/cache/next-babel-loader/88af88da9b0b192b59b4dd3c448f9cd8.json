{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport useOnClickOutside from '../../../../common/src/hooks/useOnClickOutside';\nimport ComponentWrapper, { Input, SelectWrapper, CurrentOption, Dropdown } from './input.style';\n\nvar InputComponent = function InputComponent(_ref) {\n  var className = _ref.className,\n      inputType = _ref.inputType,\n      placeholder = _ref.placeholder,\n      selectOptions = _ref.selectOptions,\n      inputValue = _ref.inputValue,\n      inputOnChange = _ref.inputOnChange,\n      selectOnUpdate = _ref.selectOnUpdate,\n      selectedValue = _ref.selectedValue,\n      currency = _ref.currency;\n\n  var _useState = useState({\n    open: false,\n    currency: currency,\n    selectedValue: selectedValue\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var handleDropdown = function handleDropdown() {\n    setState(_objectSpread({}, state, {\n      open: !state.open\n    }));\n  };\n\n  var handleSelectedData = function handleSelectedData(item) {\n    setState(_objectSpread({}, state, {\n      open: false,\n      currency: item.title,\n      selectedValue: item.value\n    }));\n    selectOnUpdate(item.value);\n  };\n\n  var dropdownRef = useRef(null);\n  useOnClickOutside(dropdownRef, function () {\n    return setState(_objectSpread({}, state, {\n      open: false\n    }));\n  });\n  var addAllClasses = ['input_group'];\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return __jsx(ComponentWrapper, {\n    className: addAllClasses.join(' ')\n  }, __jsx(Input, {\n    type: inputType,\n    value: inputValue,\n    placeholder: placeholder,\n    onChange: inputOnChange,\n    required: true,\n    \"aria-label\": \"input\"\n  }));\n};\n\nInput.propTypes = {\n  /** className of the Input. */\n  className: PropTypes.string,\n\n  /** inputType prop for input field type. This should be a number or text. */\n  inputType: PropTypes.oneOf(['number', 'text']),\n\n  /** placeholder text for input field type. */\n  placeholder: PropTypes.string,\n\n  /** Call back function for inout onChange event. */\n  inputOnChange: PropTypes.func,\n\n  /** currency prop shoude be a string with currency name and symbol. */\n  currency: PropTypes.string,\n\n  /** selectedValue pron shoube be a currency string without symbol but in lowercase. */\n  selectedValue: PropTypes.string,\n\n  /** selectOptions prop contain a set of data in array of object form. It has 3 properties id, value and title. */\n  selectOptions: PropTypes.array,\n\n  /** It contain selected data. */\n  selectOnUpdate: PropTypes.func\n};\nInput.defaultProps = {\n  inputType: 'text',\n  inputOnChange: function inputOnChange() {}\n};\nexport default InputComponent;","map":null,"metadata":{},"sourceType":"module"}