{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport ComponentWrapper from './radioGroup.style';\n\nconst RadioGroup = ({\n  className,\n  name,\n  value,\n  items,\n  onUpdate\n}) => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    value: value\n  });\n\n  const onChange = e => {\n    const currentValue = e.target.value;\n    setState(_objectSpread({}, state, {\n      value: currentValue\n    }));\n    onUpdate(e.target.value);\n  };\n\n  const addAllClasses = ['radio_group'];\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return __jsx(ComponentWrapper, {\n    className: addAllClasses.join(' ')\n  }, items.map(item => __jsx(\"label\", {\n    htmlFor: item.title.toLowerCase().split(' ').join('-'),\n    key: `radio__group-id${item.id}`,\n    className: state.value === item.value ? 'active' : ''\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    id: item.title.toLowerCase().split(' ').join('-'),\n    name: name,\n    onChange: onChange,\n    value: item.value,\n    checked: state.value === item.value,\n    disabled: item.disabled\n  }), item.title || item.text ? __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(\"h4\", null, item.title && item.title), __jsx(\"p\", null, item.text && item.text)) : '')));\n};\n\n/** RadioGroup default type. */\nRadioGroup.defaultProps = {\n  onUpdate: () => {}\n};\nexport default RadioGroup;","map":null,"metadata":{},"sourceType":"module"}