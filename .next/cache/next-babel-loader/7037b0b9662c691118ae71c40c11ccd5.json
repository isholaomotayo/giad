{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/developer1/apps/giadFrontend/package/reusecore/src/elements/Drawer/index.js\";\nvar __jsx = React.createElement;\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport RcDrawer from 'rc-drawer';\nimport 'rc-drawer/assets/index.css';\n\nvar Drawer = function Drawer(_ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      closeButton = _ref.closeButton,\n      closeButtonStyle = _ref.closeButtonStyle,\n      drawerHandler = _ref.drawerHandler,\n      toggleHandler = _ref.toggleHandler,\n      open = _ref.open,\n      props = _objectWithoutProperties(_ref, [\"className\", \"children\", \"closeButton\", \"closeButtonStyle\", \"drawerHandler\", \"toggleHandler\", \"open\"]); // Add all classs to an array\n\n\n  var addAllClasses = ['reusecore__drawer']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return __jsx(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(RcDrawer, _extends({\n    open: open,\n    onMaskClick: toggleHandler,\n    className: addAllClasses.join(' ')\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"reusecore-drawer__close\",\n    onClick: toggleHandler,\n    style: closeButtonStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, closeButton), children), __jsx(\"div\", {\n    className: \"reusecore-drawer__handler\",\n    style: {\n      display: 'inline-block'\n    },\n    onClick: toggleHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, drawerHandler));\n};\n\nDrawer.propTypes = {\n  /** ClassName of the Drawer */\n  className: PropTypes.string,\n\n  /** Used to render icon, button, text or any elements inside the closeButton prop. */\n  closeButton: PropTypes.element,\n\n  /** Set drawer width. Default value is 300px. */\n  width: PropTypes.string,\n\n  /** Set drawer position left || right || top || bottom. */\n  placement: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),\n\n  /** drawerHandler could be button, icon, string or any component */\n  drawerHandler: PropTypes.element.isRequired\n};\nDrawer.defaultProps = {\n  width: '300px',\n  handler: false,\n  level: null\n};\nexport default Drawer;","map":{"version":3,"sources":["/Users/developer1/apps/giadFrontend/package/reusecore/src/elements/Drawer/index.js"],"names":["Drawer","className","children","closeButton","closeButtonStyle","drawerHandler","toggleHandler","open","props","addAllClasses","display","PropTypes","width","placement","isRequired","handler","level"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport RcDrawer from 'rc-drawer';\r\nimport 'rc-drawer/assets/index.css';\r\n\r\nconst Drawer = ({\r\n  className,\r\n  children,\r\n  closeButton,\r\n  closeButtonStyle,\r\n  drawerHandler,\r\n  toggleHandler,\r\n  open,\r\n\r\n  ...props\r\n}) => {\r\n  // Add all classs to an array\r\n  const addAllClasses = ['reusecore__drawer'];\r\n\r\n  // className prop checking\r\n  if (className) {\r\n    addAllClasses.push(className);\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <RcDrawer\r\n        open={open}\r\n        onMaskClick={toggleHandler}\r\n        className={addAllClasses.join(' ')}\r\n        {...props}\r\n      >\r\n        <div className=\"reusecore-drawer__close\" onClick={toggleHandler} style={closeButtonStyle}>\r\n          {closeButton}\r\n        </div>\r\n        {children}\r\n      </RcDrawer>\r\n      <div\r\n        className=\"reusecore-drawer__handler\"\r\n        style={{ display: 'inline-block' }}\r\n        onClick={toggleHandler}\r\n      >\r\n        {drawerHandler}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nDrawer.propTypes = {\r\n  /** ClassName of the Drawer */\r\n  className: PropTypes.string,\r\n\r\n  /** Used to render icon, button, text or any elements inside the closeButton prop. */\r\n  closeButton: PropTypes.element,\r\n\r\n  /** Set drawer width. Default value is 300px. */\r\n  width: PropTypes.string,\r\n\r\n  /** Set drawer position left || right || top || bottom. */\r\n  placement: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),\r\n\r\n  /** drawerHandler could be button, icon, string or any component */\r\n  drawerHandler: PropTypes.element.isRequired\r\n};\r\n\r\nDrawer.defaultProps = {\r\n  width: '300px',\r\n  handler: false,\r\n  level: null\r\n};\r\n\r\nexport default Drawer;\r\n"]},"metadata":{},"sourceType":"module"}