{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/developer1/apps/giadFrontend/package/pages/_app.js\";\nvar __jsx = React.createElement;\nimport React, { Fragment } from 'react';\nimport { Modal } from '@redq/reuse-modal';\nimport '@redq/reuse-modal/es/index.css';\nimport { ApolloProvider } from 'react-apollo';\nimport withData from '../lib/withData';\nimport App, { Container } from 'next/app'; // const App = ({ Component, pageProps }) => {\n//   return (\n//     <Fragment>\n//       <Modal />\n//       <Component {...pageProps} />\n//     </Fragment>\n//   );\n// };\n// App.getInitialProps = async ({ Component, ctx }) => {\n//   let pageProps = {};\n//   if (Component.getInitialProps) {\n//     pageProps = await Component.getInitialProps(ctx);\n//   }\n//   return { pageProps };\n// };\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    } // this exposes the query to the user\n\n\n    pageProps.query = ctx.query;\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      apollo,\n      pageProps\n    } = this.props;\n    return __jsx(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, __jsx(ApolloProvider, {\n      client: apollo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, __jsx(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, __jsx(Modal, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), __jsx(Component, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withData(MyApp);","map":{"version":3,"sources":["/Users/developer1/apps/giadFrontend/package/pages/_app.js"],"names":["React","Fragment","Modal","ApolloProvider","withData","App","Container","MyApp","getInitialProps","Component","ctx","pageProps","query","render","apollo","props"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,OAAO,gCAAP;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,GAAP,IAAcC,SAAd,QAA+B,UAA/B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAN,SAAoBF,GAApB,CAAwB;AACtB,eAAaG,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAAiD;AAC/C,QAAIC,SAAS,GAAG,EAAhB;;AACA,QAAIF,SAAS,CAACD,eAAd,EAA+B;AAC7BG,MAAAA,SAAS,GAAG,MAAMF,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CAAlB;AACD,KAJ8C,CAK/C;;;AACAC,IAAAA,SAAS,CAACC,KAAV,GAAkBF,GAAG,CAACE,KAAtB;AACA,WAAO;AAAED,MAAAA;AAAF,KAAP;AACD;;AACDE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEJ,MAAAA,SAAF;AAAaK,MAAAA,MAAb;AAAqBH,MAAAA;AAArB,QAAmC,KAAKI,KAA9C;AAEA,WACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAED,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,SAAD,eAAeH,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFF,CADF,CADF,CADF;AAUD;;AAvBqB;;AAyBxB,eAAeP,QAAQ,CAACG,KAAD,CAAvB","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { Modal } from '@redq/reuse-modal';\r\nimport '@redq/reuse-modal/es/index.css';\r\nimport { ApolloProvider } from 'react-apollo';\r\nimport withData from '../lib/withData';\r\nimport App, { Container } from 'next/app';\r\n\r\n// const App = ({ Component, pageProps }) => {\r\n//   return (\r\n//     <Fragment>\r\n//       <Modal />\r\n//       <Component {...pageProps} />\r\n//     </Fragment>\r\n//   );\r\n// };\r\n\r\n// App.getInitialProps = async ({ Component, ctx }) => {\r\n//   let pageProps = {};\r\n//   if (Component.getInitialProps) {\r\n//     pageProps = await Component.getInitialProps(ctx);\r\n//   }\r\n//   return { pageProps };\r\n// };\r\n\r\nclass MyApp extends App {\r\n  static async getInitialProps({ Component, ctx }) {\r\n    let pageProps = {};\r\n    if (Component.getInitialProps) {\r\n      pageProps = await Component.getInitialProps(ctx);\r\n    }\r\n    // this exposes the query to the user\r\n    pageProps.query = ctx.query;\r\n    return { pageProps };\r\n  }\r\n  render() {\r\n    const { Component, apollo, pageProps } = this.props;\r\n\r\n    return (\r\n      <Container>\r\n        <ApolloProvider client={apollo}>\r\n          <Fragment>\r\n            <Modal />\r\n            <Component {...pageProps} />\r\n          </Fragment>\r\n        </ApolloProvider>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\nexport default withData(MyApp);\r\n"]},"metadata":{},"sourceType":"module"}