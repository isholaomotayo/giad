{"ast":null,"code":"import withApollo from 'next-with-apollo';\nimport ApolloClient from 'apollo-boost';\nimport { endpoint, prodEndpoint } from '../config';\nimport { LOCAL_STATE_QUERY } from '../components/Cart';\n\nfunction createClient({\n  headers\n}) {\n  return new ApolloClient({\n    uri: process.env.NODE_ENV === 'development' ? endpoint : prodEndpoint,\n    request: operation => {\n      operation.setContext({\n        fetchOptions: {//credentials: 'include',\n        },\n        headers\n      });\n    },\n    // local data\n    clientState: {\n      resolvers: {\n        Mutation: {\n          toggleCart(_, variables, {\n            cache\n          }) {\n            // read the cartOpen value from the cache\n            const {\n              cartOpen\n            } = cache.readQuery({\n              query: LOCAL_STATE_QUERY\n            }); // Write the cart State to the opposite\n\n            const data = {\n              data: {\n                cartOpen: !cartOpen\n              }\n            };\n            cache.writeData(data);\n            return data;\n          }\n\n        }\n      },\n      defaults: {\n        cartOpen: false\n      }\n    }\n  });\n}\n\nexport default withApollo(createClient);","map":{"version":3,"sources":["/Users/developer1/apps/giadFrontend/package/lib/withData.js"],"names":["withApollo","ApolloClient","endpoint","prodEndpoint","LOCAL_STATE_QUERY","createClient","headers","uri","process","env","NODE_ENV","request","operation","setContext","fetchOptions","clientState","resolvers","Mutation","toggleCart","_","variables","cache","cartOpen","readQuery","query","data","writeData","defaults"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,WAAvC;AACA,SAASC,iBAAT,QAAkC,oBAAlC;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAmC;AACjC,SAAO,IAAIL,YAAJ,CAAiB;AACtBM,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyCR,QAAzC,GAAoDC,YADnC;AAEtBQ,IAAAA,OAAO,EAAEC,SAAS,IAAI;AACpBA,MAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,QAAAA,YAAY,EAAE,CACZ;AADY,SADK;AAInBR,QAAAA;AAJmB,OAArB;AAMD,KATqB;AAUtB;AACAS,IAAAA,WAAW,EAAE;AACXC,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,UAAU,CAACC,CAAD,EAAIC,SAAJ,EAAe;AAAEC,YAAAA;AAAF,WAAf,EAA0B;AAClC;AACA,kBAAM;AAAEC,cAAAA;AAAF,gBAAeD,KAAK,CAACE,SAAN,CAAgB;AACnCC,cAAAA,KAAK,EAAEpB;AAD4B,aAAhB,CAArB,CAFkC,CAKlC;;AACA,kBAAMqB,IAAI,GAAG;AACXA,cAAAA,IAAI,EAAE;AAAEH,gBAAAA,QAAQ,EAAE,CAACA;AAAb;AADK,aAAb;AAGAD,YAAAA,KAAK,CAACK,SAAN,CAAgBD,IAAhB;AACA,mBAAOA,IAAP;AACD;;AAZO;AADD,OADA;AAiBXE,MAAAA,QAAQ,EAAE;AACRL,QAAAA,QAAQ,EAAE;AADF;AAjBC;AAXS,GAAjB,CAAP;AAiCD;;AAED,eAAetB,UAAU,CAACK,YAAD,CAAzB","sourcesContent":["import withApollo from 'next-with-apollo';\nimport ApolloClient from 'apollo-boost';\nimport { endpoint, prodEndpoint } from '../config';\nimport { LOCAL_STATE_QUERY } from '../components/Cart';\n\nfunction createClient({ headers }) {\n  return new ApolloClient({\n    uri: process.env.NODE_ENV === 'development' ? endpoint : prodEndpoint,\n    request: operation => {\n      operation.setContext({\n        fetchOptions: {\n          //credentials: 'include',\n        },\n        headers\n      });\n    },\n    // local data\n    clientState: {\n      resolvers: {\n        Mutation: {\n          toggleCart(_, variables, { cache }) {\n            // read the cartOpen value from the cache\n            const { cartOpen } = cache.readQuery({\n              query: LOCAL_STATE_QUERY\n            });\n            // Write the cart State to the opposite\n            const data = {\n              data: { cartOpen: !cartOpen }\n            };\n            cache.writeData(data);\n            return data;\n          }\n        }\n      },\n      defaults: {\n        cartOpen: false\n      }\n    }\n  });\n}\n\nexport default withApollo(createClient);\n"]},"metadata":{},"sourceType":"module"}