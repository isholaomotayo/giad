{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/developer1/apps/giadFrontend/package/components/TakeMyMoney.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Mutation } from 'react-apollo';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport Error from './ErrorMessage';\nimport User, { CURRENT_USER_QUERY } from './User';\nconst CREATE_ORDER_MUTATION = gql`\n  mutation createOrder($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        title\n      }\n    }\n  }\n`;\n\nfunction totalItems(cart) {\n  return cart.reduce((tally, cartItem) => tally + cartItem.quantity, 0);\n}\n\nclass TakeMyMoney extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onToken\", async (res, createOrder) => {\n      NProgress.start(); // manually call the mutation once we have the stripe token\n\n      const order = await createOrder({\n        variables: {\n          token: res.id\n        }\n      }).catch(err => {\n        alert(err.message);\n      });\n      Router.push({\n        pathname: '/order',\n        query: {\n          id: order.data.createOrder.id\n        }\n      });\n    });\n  }\n\n  render() {\n    return __jsx(User, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, ({\n      data: {\n        me\n      },\n      loading\n    }) => {\n      if (loading) return null;\n      return __jsx(Mutation, {\n        mutation: CREATE_ORDER_MUTATION,\n        refetchQueries: [{\n          query: CURRENT_USER_QUERY\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, createOrder => __jsx(StripeCheckout, {\n        amount: calcTotalPrice(me ? me.cart : ''),\n        name: \"Sick Fits\",\n        description: `Order of ${totalItems(me.cart)} items!`,\n        image: me.cart.length && me.cart[0].item && me.cart[0].item.image,\n        stripeKey: \"pk_test_Vtknn6vSdcZWSG2JWvEiWSqC\",\n        currency: \"USD\",\n        email: me.email,\n        token: res => this.onToken(res, createOrder),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, this.props.children));\n    });\n  }\n\n}\n\nexport default TakeMyMoney;\nexport { CREATE_ORDER_MUTATION };","map":{"version":3,"sources":["/Users/developer1/apps/giadFrontend/package/components/TakeMyMoney.js"],"names":["React","StripeCheckout","Mutation","Router","NProgress","PropTypes","gql","calcTotalPrice","Error","User","CURRENT_USER_QUERY","CREATE_ORDER_MUTATION","totalItems","cart","reduce","tally","cartItem","quantity","TakeMyMoney","Component","res","createOrder","start","order","variables","token","id","catch","err","alert","message","push","pathname","query","data","render","me","loading","length","item","image","email","onToken","props","children"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,IAAP,IAAeC,kBAAf,QAAyC,QAAzC;AAEA,MAAMC,qBAAqB,GAAGL,GAAI;;;;;;;;;;;;CAAlC;;AAcA,SAASM,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOA,IAAI,CAACC,MAAL,CAAY,CAACC,KAAD,EAAQC,QAAR,KAAqBD,KAAK,GAAGC,QAAQ,CAACC,QAAlD,EAA4D,CAA5D,CAAP;AACD;;AAED,MAAMC,WAAN,SAA0BlB,KAAK,CAACmB,SAAhC,CAA0C;AAAA;AAAA;;AAAA,qCAC9B,OAAOC,GAAP,EAAYC,WAAZ,KAA4B;AACpCjB,MAAAA,SAAS,CAACkB,KAAV,GADoC,CAEpC;;AACA,YAAMC,KAAK,GAAG,MAAMF,WAAW,CAAC;AAC9BG,QAAAA,SAAS,EAAE;AACTC,UAAAA,KAAK,EAAEL,GAAG,CAACM;AADF;AADmB,OAAD,CAAX,CAIjBC,KAJiB,CAIXC,GAAG,IAAI;AACdC,QAAAA,KAAK,CAACD,GAAG,CAACE,OAAL,CAAL;AACD,OANmB,CAApB;AAOA3B,MAAAA,MAAM,CAAC4B,IAAP,CAAY;AACVC,QAAAA,QAAQ,EAAE,QADA;AAEVC,QAAAA,KAAK,EAAE;AAAEP,UAAAA,EAAE,EAAEH,KAAK,CAACW,IAAN,CAAWb,WAAX,CAAuBK;AAA7B;AAFG,OAAZ;AAID,KAfuC;AAAA;;AAgBxCS,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC;AAAED,MAAAA,IAAI,EAAE;AAAEE,QAAAA;AAAF,OAAR;AAAgBC,MAAAA;AAAhB,KAAD,KAA+B;AAC9B,UAAIA,OAAJ,EAAa,OAAO,IAAP;AACb,aACE,MAAC,QAAD;AACE,QAAA,QAAQ,EAAE1B,qBADZ;AAEE,QAAA,cAAc,EAAE,CAAC;AAAEsB,UAAAA,KAAK,EAAEvB;AAAT,SAAD,CAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIGW,WAAW,IACV,MAAC,cAAD;AACE,QAAA,MAAM,EAAEd,cAAc,CAAC6B,EAAE,GAAGA,EAAE,CAACvB,IAAN,GAAa,EAAhB,CADxB;AAEE,QAAA,IAAI,EAAC,WAFP;AAGE,QAAA,WAAW,EAAG,YAAWD,UAAU,CAACwB,EAAE,CAACvB,IAAJ,CAAU,SAH/C;AAIE,QAAA,KAAK,EACHuB,EAAE,CAACvB,IAAH,CAAQyB,MAAR,IAAkBF,EAAE,CAACvB,IAAH,CAAQ,CAAR,EAAW0B,IAA7B,IAAqCH,EAAE,CAACvB,IAAH,CAAQ,CAAR,EAAW0B,IAAX,CAAgBC,KALzD;AAOE,QAAA,SAAS,EAAC,kCAPZ;AAQE,QAAA,QAAQ,EAAC,KARX;AASE,QAAA,KAAK,EAAEJ,EAAE,CAACK,KATZ;AAUE,QAAA,KAAK,EAAErB,GAAG,IAAI,KAAKsB,OAAL,CAAatB,GAAb,EAAkBC,WAAlB,CAVhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAYG,KAAKsB,KAAL,CAAWC,QAZd,CALJ,CADF;AAuBD,KA1BH,CADF;AA8BD;;AA/CuC;;AAkD1C,eAAe1B,WAAf;AACA,SAASP,qBAAT","sourcesContent":["import React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Mutation } from 'react-apollo';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport Error from './ErrorMessage';\nimport User, { CURRENT_USER_QUERY } from './User';\n\nconst CREATE_ORDER_MUTATION = gql`\n  mutation createOrder($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        title\n      }\n    }\n  }\n`;\n\nfunction totalItems(cart) {\n  return cart.reduce((tally, cartItem) => tally + cartItem.quantity, 0);\n}\n\nclass TakeMyMoney extends React.Component {\n  onToken = async (res, createOrder) => {\n    NProgress.start();\n    // manually call the mutation once we have the stripe token\n    const order = await createOrder({\n      variables: {\n        token: res.id\n      }\n    }).catch(err => {\n      alert(err.message);\n    });\n    Router.push({\n      pathname: '/order',\n      query: { id: order.data.createOrder.id }\n    });\n  };\n  render() {\n    return (\n      <User>\n        {({ data: { me }, loading }) => {\n          if (loading) return null;\n          return (\n            <Mutation\n              mutation={CREATE_ORDER_MUTATION}\n              refetchQueries={[{ query: CURRENT_USER_QUERY }]}\n            >\n              {createOrder => (\n                <StripeCheckout\n                  amount={calcTotalPrice(me ? me.cart : '')}\n                  name=\"Sick Fits\"\n                  description={`Order of ${totalItems(me.cart)} items!`}\n                  image={\n                    me.cart.length && me.cart[0].item && me.cart[0].item.image\n                  }\n                  stripeKey=\"pk_test_Vtknn6vSdcZWSG2JWvEiWSqC\"\n                  currency=\"USD\"\n                  email={me.email}\n                  token={res => this.onToken(res, createOrder)}\n                >\n                  {this.props.children}\n                </StripeCheckout>\n              )}\n            </Mutation>\n          );\n        }}\n      </User>\n    );\n  }\n}\n\nexport default TakeMyMoney;\nexport { CREATE_ORDER_MUTATION };\n"]},"metadata":{},"sourceType":"module"}